1. Revising Aggregations - The Count Function

Query a count of the number of cities in CITY with populations larger than 100,000.
## Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+

Solution: 

SELECT COUNT(POPULATION)
FROM CITY
WHERE POPULATION > 100000;


2. Revising Aggregations - The Sum Function

Query the total population of all cities in CITY where District is California.

## Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+


Solution:

SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'CALIFORNIA';


3. Revising Aggregations - Averages

Query the average population of all cities in CITY where District is California.

## Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+

Solution:

SELECT AVG(POPULATION)
FROM CITY 
WHERE DISTRICT = 'CALIFORNIA';

4. Average Population

Query the average population for all cities in CITY, rounded down to the nearest integer.

## Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+

Solution:

SELECT FLOOR(AVG(POPULATION))
FROM CITY;

Note: The SQL FLOOR() function rounded up any positive or negative decimal value down to the next least integer value.


5. Japan Population

Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

## Input Format

The CITY table is described as follows: 

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+

Solution:

SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';

6. Population Density Difference

Query the difference between the maximum and minimum populations in CITY.

## Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+

Solution:

SELECT MAX(POPULATION) - MIN(POPULATION)
FROM CITY;


7. The Blunder

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard’s 0 key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e. actual – miscalculated:  average monthly salaries), and round it up to the next integer.

Solution:

SELECT
CAST(CEILING(AVG(CAST(salary AS float)) -
AVG(CAST(REPLACE(salary, 0, '') AS float))) AS int)
FROM employees;


8. Top Earners

We define an employee's total earnings to be their monthly(SALARY*MONTHS)  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
Then print these values as 2 space-separated integers.

Solution:

SELECT MAX(SALARY*MONTHS), COUNT(*)
FROM EMPLOYEE
WHERE (SALARY*MONTHS) >= (SELECT MAX(SALARY*MONTHS) FROM EMPLOYEE);


9. Weather Observation Station 2

Query the following two values from the **STATION** table:

1. The sum of all values in *LAT_N* rounded to a scale of 2 decimal places.
2. The sum of all values in *LONG_W* rounded to a scale of 2 decimal places.

SOLUTION: 

SELECT ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2)
FROM STATION;


10. Weather Observation Station 13

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345 . Truncate your answer to 4 decimal places.

SELECT TRUNCATE(SUM(LAT_N), 4) 
FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345;













